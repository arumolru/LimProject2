//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.7.0
//     from Assets/08.InputSystem/PlayerInputActions.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @PlayerInputActions: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @PlayerInputActions()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""PlayerInputActions"",
    ""maps"": [
        {
            ""name"": ""Player"",
            ""id"": ""a41fc92e-c987-48b3-815f-3ef2b2d91e6e"",
            ""actions"": [
                {
                    ""name"": ""Move"",
                    ""type"": ""Value"",
                    ""id"": ""92d921bd-7a7a-4f1e-ba98-f911f94bb15c"",
                    ""expectedControlType"": ""Vector3"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Jump"",
                    ""type"": ""Button"",
                    ""id"": ""4b69b801-345e-43c7-9e33-af4f6d0ede3c"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""MiniMap"",
                    ""type"": ""Button"",
                    ""id"": ""f8427503-ed62-4b49-8862-a5fab7ef0d32"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""3D Vector"",
                    ""id"": ""6c83bd62-acb5-46ce-8fd3-5b23bda8ff8a"",
                    ""path"": ""3DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""left"",
                    ""id"": ""0317ae0b-116e-49ee-a465-ea4af537df1b"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""KeyBoardMosue"",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""2b38320e-faf4-434d-b1be-e3f7400ac991"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""KeyBoardMosue"",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""forward"",
                    ""id"": ""907c9204-aad6-4d0f-9002-c883dc7339dc"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""KeyBoardMosue"",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""backward"",
                    ""id"": ""4a23185e-4858-4708-a556-0581e5c368fe"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""KeyBoardMosue"",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""422e5cf4-b7fa-4f30-9a77-415fb05b31e1"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""KeyBoardMosue"",
                    ""action"": ""Jump"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""a798505d-32bf-4133-a77a-732acc2509db"",
                    ""path"": ""<Keyboard>/q"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""KeyBoardMosue"",
                    ""action"": ""MiniMap"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Lever"",
            ""id"": ""1bf35488-17f8-4b41-80cd-d9bdfecb8bc5"",
            ""actions"": [
                {
                    ""name"": ""Open"",
                    ""type"": ""Button"",
                    ""id"": ""149afa69-a534-4ffe-b8f3-448cfabcbb5e"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""fe58a75c-58a4-4c7a-ad71-1407a833a479"",
                    ""path"": ""<Keyboard>/e"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""KeyBoardMosue"",
                    ""action"": ""Open"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Manager"",
            ""id"": ""e61e31a4-990b-415b-a2f7-e3191c6475e3"",
            ""actions"": [
                {
                    ""name"": ""Lobby"",
                    ""type"": ""Button"",
                    ""id"": ""284af13b-c4c9-4fe4-aedb-de8538184a09"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""9702f894-59e1-419d-b232-8a8aa767e57d"",
                    ""path"": ""<Keyboard>/escape"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""KeyBoardMosue"",
                    ""action"": ""Lobby"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": [
        {
            ""name"": ""KeyBoardMosue"",
            ""bindingGroup"": ""KeyBoardMosue"",
            ""devices"": []
        }
    ]
}");
        // Player
        m_Player = asset.FindActionMap("Player", throwIfNotFound: true);
        m_Player_Move = m_Player.FindAction("Move", throwIfNotFound: true);
        m_Player_Jump = m_Player.FindAction("Jump", throwIfNotFound: true);
        m_Player_MiniMap = m_Player.FindAction("MiniMap", throwIfNotFound: true);
        // Lever
        m_Lever = asset.FindActionMap("Lever", throwIfNotFound: true);
        m_Lever_Open = m_Lever.FindAction("Open", throwIfNotFound: true);
        // Manager
        m_Manager = asset.FindActionMap("Manager", throwIfNotFound: true);
        m_Manager_Lobby = m_Manager.FindAction("Lobby", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Player
    private readonly InputActionMap m_Player;
    private List<IPlayerActions> m_PlayerActionsCallbackInterfaces = new List<IPlayerActions>();
    private readonly InputAction m_Player_Move;
    private readonly InputAction m_Player_Jump;
    private readonly InputAction m_Player_MiniMap;
    public struct PlayerActions
    {
        private @PlayerInputActions m_Wrapper;
        public PlayerActions(@PlayerInputActions wrapper) { m_Wrapper = wrapper; }
        public InputAction @Move => m_Wrapper.m_Player_Move;
        public InputAction @Jump => m_Wrapper.m_Player_Jump;
        public InputAction @MiniMap => m_Wrapper.m_Player_MiniMap;
        public InputActionMap Get() { return m_Wrapper.m_Player; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(PlayerActions set) { return set.Get(); }
        public void AddCallbacks(IPlayerActions instance)
        {
            if (instance == null || m_Wrapper.m_PlayerActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_PlayerActionsCallbackInterfaces.Add(instance);
            @Move.started += instance.OnMove;
            @Move.performed += instance.OnMove;
            @Move.canceled += instance.OnMove;
            @Jump.started += instance.OnJump;
            @Jump.performed += instance.OnJump;
            @Jump.canceled += instance.OnJump;
            @MiniMap.started += instance.OnMiniMap;
            @MiniMap.performed += instance.OnMiniMap;
            @MiniMap.canceled += instance.OnMiniMap;
        }

        private void UnregisterCallbacks(IPlayerActions instance)
        {
            @Move.started -= instance.OnMove;
            @Move.performed -= instance.OnMove;
            @Move.canceled -= instance.OnMove;
            @Jump.started -= instance.OnJump;
            @Jump.performed -= instance.OnJump;
            @Jump.canceled -= instance.OnJump;
            @MiniMap.started -= instance.OnMiniMap;
            @MiniMap.performed -= instance.OnMiniMap;
            @MiniMap.canceled -= instance.OnMiniMap;
        }

        public void RemoveCallbacks(IPlayerActions instance)
        {
            if (m_Wrapper.m_PlayerActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IPlayerActions instance)
        {
            foreach (var item in m_Wrapper.m_PlayerActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_PlayerActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public PlayerActions @Player => new PlayerActions(this);

    // Lever
    private readonly InputActionMap m_Lever;
    private List<ILeverActions> m_LeverActionsCallbackInterfaces = new List<ILeverActions>();
    private readonly InputAction m_Lever_Open;
    public struct LeverActions
    {
        private @PlayerInputActions m_Wrapper;
        public LeverActions(@PlayerInputActions wrapper) { m_Wrapper = wrapper; }
        public InputAction @Open => m_Wrapper.m_Lever_Open;
        public InputActionMap Get() { return m_Wrapper.m_Lever; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(LeverActions set) { return set.Get(); }
        public void AddCallbacks(ILeverActions instance)
        {
            if (instance == null || m_Wrapper.m_LeverActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_LeverActionsCallbackInterfaces.Add(instance);
            @Open.started += instance.OnOpen;
            @Open.performed += instance.OnOpen;
            @Open.canceled += instance.OnOpen;
        }

        private void UnregisterCallbacks(ILeverActions instance)
        {
            @Open.started -= instance.OnOpen;
            @Open.performed -= instance.OnOpen;
            @Open.canceled -= instance.OnOpen;
        }

        public void RemoveCallbacks(ILeverActions instance)
        {
            if (m_Wrapper.m_LeverActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(ILeverActions instance)
        {
            foreach (var item in m_Wrapper.m_LeverActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_LeverActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public LeverActions @Lever => new LeverActions(this);

    // Manager
    private readonly InputActionMap m_Manager;
    private List<IManagerActions> m_ManagerActionsCallbackInterfaces = new List<IManagerActions>();
    private readonly InputAction m_Manager_Lobby;
    public struct ManagerActions
    {
        private @PlayerInputActions m_Wrapper;
        public ManagerActions(@PlayerInputActions wrapper) { m_Wrapper = wrapper; }
        public InputAction @Lobby => m_Wrapper.m_Manager_Lobby;
        public InputActionMap Get() { return m_Wrapper.m_Manager; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(ManagerActions set) { return set.Get(); }
        public void AddCallbacks(IManagerActions instance)
        {
            if (instance == null || m_Wrapper.m_ManagerActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_ManagerActionsCallbackInterfaces.Add(instance);
            @Lobby.started += instance.OnLobby;
            @Lobby.performed += instance.OnLobby;
            @Lobby.canceled += instance.OnLobby;
        }

        private void UnregisterCallbacks(IManagerActions instance)
        {
            @Lobby.started -= instance.OnLobby;
            @Lobby.performed -= instance.OnLobby;
            @Lobby.canceled -= instance.OnLobby;
        }

        public void RemoveCallbacks(IManagerActions instance)
        {
            if (m_Wrapper.m_ManagerActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IManagerActions instance)
        {
            foreach (var item in m_Wrapper.m_ManagerActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_ManagerActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public ManagerActions @Manager => new ManagerActions(this);
    private int m_KeyBoardMosueSchemeIndex = -1;
    public InputControlScheme KeyBoardMosueScheme
    {
        get
        {
            if (m_KeyBoardMosueSchemeIndex == -1) m_KeyBoardMosueSchemeIndex = asset.FindControlSchemeIndex("KeyBoardMosue");
            return asset.controlSchemes[m_KeyBoardMosueSchemeIndex];
        }
    }
    public interface IPlayerActions
    {
        void OnMove(InputAction.CallbackContext context);
        void OnJump(InputAction.CallbackContext context);
        void OnMiniMap(InputAction.CallbackContext context);
    }
    public interface ILeverActions
    {
        void OnOpen(InputAction.CallbackContext context);
    }
    public interface IManagerActions
    {
        void OnLobby(InputAction.CallbackContext context);
    }
}
